function [trial, status] = cbTrialDetection(display, stimParams)
%% function [trial, status] = cbTrial(display, stimParams)
%    function to generate a stimulus for color detection experiment
% 
%  Inputs:
%    display    - display structure initialized by initDisplay
%    stimParams - stimulus parameters structure generated by initSimParams
%
%  Outputs:
%    trial      - generated staircase trial
%    status     - completion status
%  
%  See also:
%    initDisplay, initStimParams, doTrial, cbSingleFrame
%
%  History:
%    (HJ) Dec, 2012 : Adopted from cocTrial
%    (HJ) Aug, 2013 : Clean up, commented and increase robustness

%% Check inputs
if nargin < 1, error('Display structure required'); end
if nargin < 2, error('Stimulus parameter structure required'); end

%% Init parameters
%  Should be changed here
%  cbTrialImageSequence should be updated
sequence            = cbTrialImageSequence(display, stimParams);
timing              = (1:length(sequence))'*stimParams.stimframe;
cmap                = displayGet(display,'gamma table');
fixSeq              = ones(size(sequence));


%% Make reference stim
%  Compute size for one patch
patchWidth  = angle2pix(display, stimParams.visualSize(2));
patchHeight = angle2pix(display, stimParams.visualSize(1));

%  Compute stimulus size (2 patches + 1 gap)
stimWidth   = round(2*patchWidth/(1-stimParams.gapSize));
stimHeight  = patchHeight; %(height in pixels)

%  Init reference image
cbColor = [127 127 127]; % same as bg color
cbIm    = repmat(reshape(cbColor,[1 1 3]),stimHeight,stimWidth);

%  Compute gap position
gapSize = stimParams.gapSize;
gapL    = floor((0.5-gapSize/2)*stimWidth);
gapR    = floor((0.5+gapSize/2)*stimWidth);

%  Set gap color
for i = 1 : 3
    cbIm(:, gapL +1:gapR,i)  = display.backColorRgb(i);
end

%  Blur stimulus if needed
if stimParams.Gsig > 0
    gFilter = fspecial('Gaussian',[10 10],stimParams.Gsig);
    cbIm    = imfilter(cbIm, gFilter, 'same', display.backColorRgb(1));
end

%% Make match stimulus
matchParams         = stimParams;
matchParams.gapL    = gapL;
matchParams.gapR    = gapR;
matchParams.bgColor = display.backColorRgb(1);
matchParams.type    = stimParams.Type;
matchParams.color   = cbColor;
matchIm             = cbSingleFrame(matchParams,cbIm);
matchStim           = createStimulusStruct(matchIm,cmap,sequence,[],timing,fixSeq);
matchStim           = cbCreateTextures(display, matchStim);

%% Make blank stimulus
blankIm         = cbIm;
blankIm(:,:,:)  = display.backColorRgb(1);
col = fixSeq(1) +1; %fixSeq(1) keeps the pos the same as for the edge stimuli and +3 changes the color
blankStim   = createStimulusStruct(blankIm,cmap,1,[], [], col);
blankStim   = createTextures(display, blankStim);
isi.sound   = soundFreqSweep(500, 1000, .05);


%% Build the trial events
trial = addTrialEvent(display,[],'soundEvent',isi );
trial = addTrialEvent(display,trial,'stimulusEvent', 'stimulus', matchStim);
trial = addTrialEvent(display,trial,'ISIEvent', 'stimulus', blankStim, 'duration', 0.01);

status = 'done';
end