function [response, timing] = showStimulus(display, stimulus, ...    runPriority, showTiming)%% function [response, timing] = showStimulus(display,stimulus, ...%                                              [runPriority], [showTiming])%    show stimulus in trial event to screen%%  Inputs:%    display     - ISET compatible display structure, should also contains%                  an opned psychToolbox window pointer%    stimulus    - stimulus parameter structure%    runPriority - priority level, default 0%    showTiming  - bool, indicating whether or not to show timing%%  Outputs:%    response    - user response for trial event%                  .keyCode, keyCode for the keys user pressed%                  .secs, time used for trial%    timing      - time used for this trial%%  See also:%    doTrial, initDisplay, initStimParams%%  History:%  ( RFD) Feb, 2005: ported from showStimulus.%  ( JW ) May, 2008: modified to allow timing to be controlled by%                    stimulus.seqtiming if the field exists.%  ( RFB) Jul, 2009: Added in ability to change input device with%                    stimulus.inputDevice parameter.%  ( AMR) Jul, 2009: added KbQueue capability to work on 3T#2; will also%                    collect responses throughout the length of the frame,%                    even if the frame is very long.  Requires a devices%                    field in display (use getDevices.m) and will collect%                    from external keyboard only.%  ( HJ ) Aug, 2013: Update keyCode and timing to be compatible with newest%                    ISET and PsychToolbox%  ( HJ ) Oct, 2013: added some code to make it capable of using bit++ box%                    to achieve higher color bit depthif nargin < 1, help(mfilename); endif nargin < 2, error('Display and stimulus structure required'); endif nargin < 3, runPriority = 0; endif nargin < 4, showTiming = 0;  endif ~isfield(stimulus,'textures')    error('Textures should be created before stimulus presentation.');endif isfield(stimulus,'inputDevice')    custKbCheck = sprintf('KbCheck(%d);',stimulus.inputDevice);else    custKbCheck = 'KbCheck;';endif ~isfield(display,'fixFirst')    display.fixFirst = 0;endif ~isfield(display,'postTrialFix')    display.postTrialFix = 0;endnFrames = length(stimulus.seq);HideCursor;nGamma = size(stimulus.cmap,3);nImages = length(stimulus.textures);response.keyCode = [];response.secs = [];Priority(runPriority);s = GetSecs;if isfield(display,'devices')    % external keyboard (or MRI button box) responses    keylist = ones(1,256);  %keys to record    keylist(KbName('/')) = 0;  % ignore backslashes sent by Lucas 3T#2    keylist(KbName('/?')) = 0;    KbQueueCreate(display.devices.keyInputExternal,keylist);    KbQueueStart();endfor frame = 1 : nFrames    if ~isfield(stimulus, 'fixSeq')  || isempty(stimulus.fixSeq),        colindex = 1;    else        colindex = stimulus.fixSeq(frame);    end        if stimulus.seq(frame)>0        % put in an image        if display.fixFirst==1, drawFixation(display, colindex); end        imgNum = mod(stimulus.seq(frame)-1,nImages)+1;                % check if using bits++ box        if ~isfield(display, 'USE_BITSPLUSPLUS')            display.USE_BITSPLUSPLUS = false;        end                if ~isfield(stimulus, 'clut')            stimulus.clut = [0:255; 0:255; 0:255]*256;            %warning('Clut should be initialized with texture');        end                if display.USE_BITSPLUSPLUS            %LoadIdentityClut(display.windowPtr);            BitsPlusSetClut(display.windowPtr, ...                    stimulus.clut(:,:,imgNum),[],false);            %WaitSecs(1);        end                Screen('DrawTexture', display.windowPtr, ...            stimulus.textures(imgNum),stimulus.srcRect,stimulus.destRect);                if display.fixFirst==0, drawFixation(display, colindex); end                Screen('Flip', display.windowPtr);    elseif stimulus.seq(frame)<0        % put in a color table        gammaNum = mod(-stimulus.seq(frame)-1,nGamma)+1;        drawFixation(display, colindex);        Screen('Flip', display.windowPtr);        Screen('LoadNormalizedGammaTable', display.windowPtr, ...            stimulus.cmap(:,:,gammaNum));    else        % Do nothing, except wait a frame.        Screen('Flip', display.windowPtr);    end    % Scan the keyboard    [keyIsDown,secs,keyCode] = eval(custKbCheck);    if(keyIsDown)        response.keyCode = keyCode;        response.secs = secs;    end        if ~isfield(stimulus, 'seqtiming')  || isempty(stimulus.seqtiming),        %don't wait    else        waitTime = (GetSecs-s)-stimulus.seqtiming(frame);        while(waitTime<0),            % if there is time release cpu            if(waitTime<-0.02),                WaitSecs(0.01);            end;            % timing            waitTime = (GetSecs-s)-stimulus.seqtiming(frame);        end    end    endif isfield(display,'devices')    KbQueueStop();    [k.pressed,k.firstPress,k.firstRelease, k.lastPress, k.lastRelease]=...        KbQueueCheck();    response.keyCode = KbName(KbName(k.firstPress));  % [] if no response    f = find(k.firstPress);    if k.pressed        response.secs = k.firstPress(f)-s;    else        response.secs = 0;    end    KbQueueFlush();endtiming = GetSecs-s;% Draw fixation pointif display.postTrialFix == 1    drawFixation(display);    Screen('Flip',display.windowPtr);endif showTiming    disp(['Stimulus run time: ',num2str(timing),' seconds.']);endPriority(0);