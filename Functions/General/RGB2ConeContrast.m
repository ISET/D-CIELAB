function [lmsContrast,bgLMS]=RGB2ConeContrast(display,stimRGB,bgRGB,sensor)%% function RGB2ConeContrast(display,stimRGB,[bgRGB],[sensor])%%    Compute the vector of cone contrasts (yes, real contrasts)%    when using stimRGB and backRGB.  The structures (display,%    backRGB, and stimRGB) define the characteristics of the%    display, background and contrast stimulus.  The sensor%    default to the Stockman sensors. % %  Inputs:%   %    display:  ISET compatible display structure%    stimRGB:  vector, RGB value of stimulus to be shown on display%    backRGB:  (optional) vector, background RGB value, default [.5 .5 .5]%    sensor :  (optional) A matrix of sensor wavelength sensitivities%                  shoulde contain two fields .wavelength and .data%                  Default:  Stockman sensors.%%  Outputs:%%   lmsContrast:  The vector of cone contrasts under these conditions%   bgLMS      :  The lms values of the background%%  Example:%    display = displayCreate('LCD-Apple');%    lmsContrast = RGB2ConeContrast(display, [0.3 0.4 0.5]');%%  See also:%    coneContrast2RGB %%  History:%   ( BW ) Sep, 1998 : write first version of this function%   ( WAP) Nov, 1998 : swapped location of parameters in argument list%   ( RFD) Apr, 2010 : allow an rgb2lms matrix as input%   ( HJ ) Aug, 2013 : change i/o structure, compute rgb2lms from isetbio%% Check inputsif nargin < 1, error('Display structure required'); endif nargin < 2, error('Stimulus RGB values required'); endif nargin < 3, bgRGB = [0.5 0.5 0.5]'; end%  Converts input to be in column vectorsstimRGB = stimRGB(:);bgRGB   = bgRGB(:);%  Convert background to 0~1if max(bgRGB) > 1    bgRGB = bgRGB / 255; % Assume it's 8 bit    assert(all(bgRGB >=0) && all(bgRGB <= 1));end%  Convert stimulus to 0~1if max(stimRGB) > 1    stimRGB = stimRGB / 255; % Assume it's 8 bit    assert(all(stimRGB >=0) && all(stimRGB <= 1));end%% Compute rgb2lms conversino matrixif nargin < 4 || isempty(sensor) % Sensor not specified, use stockman    [~, rgb2lms] = humanConeIsolating(display);else % Use another sensor model    wave    = sensor.wavelength;    spd     = displayGet(display,'spd',wave);    rgb2lms = sensor.data'*spd;end%% Compute stimulus contrast%  Compute background LMSbgLMS = rgb2lms * bgRGB;%  Compute stimulus LMSstimLMS = rgb2lms * stimRGB;%  Compute contrastlmsContrast = (stimLMS - bgLMS) ./ bgLMS;end